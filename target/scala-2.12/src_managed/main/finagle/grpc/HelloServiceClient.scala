
// Generated by Akka gRPC. DO NOT EDIT.
package finagle.grpc

import scala.concurrent.ExecutionContext

import io.grpc.ManagedChannel
import io.grpc.MethodDescriptor

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.stream.ActorMaterializer
import akka.stream.Materializer

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
trait HelloServiceClient extends HelloService with HelloServiceClientPowerApi with AkkaGrpcClient

object HelloServiceClient {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): HelloServiceClient =
    new DefaultHelloServiceClient(settings)
}

final class DefaultHelloServiceClient(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends HelloServiceClient {
  import DefaultHelloServiceClient._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(mat.asInstanceOf[ActorMaterializer].system, this.getClass))

  
    private def sayHelloRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(sayHelloDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHello(finagle.grpc.HelloRequest) if possible.
     */
    
      override def sayHello(): SingleResponseRequestBuilder[finagle.grpc.HelloRequest, finagle.grpc.HelloReply] =
        clientState.withChannel(sayHelloRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of sayHello
     */
    def sayHello(in: finagle.grpc.HelloRequest): scala.concurrent.Future[finagle.grpc.HelloReply] =
      sayHello().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultHelloServiceClient {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): HelloServiceClient =
    new DefaultHelloServiceClient(settings)

  import HelloService.Serializers._

  
    private val sayHelloDescriptor: MethodDescriptor[finagle.grpc.HelloRequest, finagle.grpc.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("events.HelloService", "SayHello"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait HelloServiceClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHello(finagle.grpc.HelloRequest) if possible.
     */
    
      def sayHello(): SingleResponseRequestBuilder[finagle.grpc.HelloRequest, finagle.grpc.HelloReply] = ???
    
  

}
